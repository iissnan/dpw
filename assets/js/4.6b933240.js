(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{50:function(t,s,a){t.exports=a.p+"assets/img/webstorm-karma-configuration.b030b118.png"},57:function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),n("p",[t._v("JavaScript 是一种动态类型、基于原型的解释性语言，她拥有着强大而灵活的表达能力。而 Great power comes great responsibility，在没有类似静态编译语言的编译器协助的情况下，JavaScript 大型应用可能潜在着很大的风险。因此，AngularJS 团队认为为 JavaScript 构建的应用编写测试非常的重要，他们将 "),n("em",[n("strong",[t._v("可测试性（testable）")])]),t._v(" 作为 AngularJS 框架一个非常显著的特性。")]),n("p",[t._v("AngularJS 框架为测试提供了很多特性，这些特性使得给 AngularJS 应用编写测试相当地简单。但第一次接触时可能会觉得无从入手，而一旦理解之后就会明白测试在 AngularJS 应用中其实十分的直白并有迹可循。")]),n("p",[t._v("现在，让我们从 “启动应用（刷新页面），并手动检查一切功能正常工作” 的模式切换到 “有元测试覆盖心里更有底” 的模式吧。在此前提下，更多地关注业务逻辑、算法代码优化以及制作更为精美的 UI。")]),n("p",[n("strong",[t._v("Unit Testing 与 End-to-End Testing")])]),n("ul",[n("li",[n("strong",[t._v("Unit Testing")]),t._v("\n单元测试用于直接调用代码的某个单元实体（比如 Directive，Contronller 等），并测试此功能单元实体。通常一个测试套件对应一个功能实体，测试套件由一个或多个测试用例构成。在测试用例内部，我们构造数据并调用代码，并断言代码的实际的输出符合我们的预期。")]),n("li",[n("strong",[t._v("End-to-End")]),t._v("\nE2E 测试模拟真实的用户，使用代码来模拟用户访问应用并做出某些操作（点击按钮、输入内容等）。举个简单的 E2E 测试例子：模拟用户访问应用首页，点击登录按钮，断言登陆成功时跳转到后台首页 "),n("code",[t._v("/dashboard")]),t._v("。目前在 DPW，E2E 测试主要由 Test Automation Team 负责。AngularJS 团队也提供了一个用于 E2E 测试的框架： "),n("a",{attrs:{href:"http://www.protractortest.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protractor")]),t._v("。")])]),n("h2",{attrs:{id:"测试工具栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试工具栈","aria-hidden":"true"}},[t._v("#")]),t._v(" 测试工具栈")]),n("p",[t._v("AngularJS 框架让编写测试变得简单，但为了让整个测试过程可便捷地反复地之行，我们还需要一套工具集让将测试的执行过程尽量地简化。这套工具集包括 "),n("a",{attrs:{href:"https://karma-runner.github.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Karma")]),t._v("，"),n("a",{attrs:{href:"https://mochajs.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mocha")]),t._v("，"),n("a",{attrs:{href:"http://chaijs.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Chai")]),t._v(" 以及 "),n("a",{attrs:{href:"http://sinonjs.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sinon")]),t._v("。")]),n("h3",{attrs:{id:"karma"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#karma","aria-hidden":"true"}},[t._v("#")]),n("a",{attrs:{href:"https://karma-runner.github.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Karma")])]),n("p",[t._v("Karma 是 AngularJS 团队出品的测试运行工具（"),n("em",[n("strong",[t._v("Test Runner")])]),t._v("），目标在于简化建立测试环境的工作量。Karma 的特性之一是可以将代码放置在真实的设备上运行，可以指定多个运行环境，例如同时在 Google Chrome，Firefox 和 IE 浏览器上运行；另外一个特性是其测试框架无关性，这意味这你可以选择熟悉的测试框架（Mocha，Jasmine 或者 Qunit）；最后，Karma 与 IDE （例如 WebStorm） 和 持续集成系统（Jenkins）都可以方便的结合使用。")]),n("h4",{attrs:{id:"安装-karma"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装-karma","aria-hidden":"true"}},[t._v("#")]),t._v(" 安装 Karma")]),n("p",[t._v("Karma 的运行环境是 "),n("a",{attrs:{href:"https://nodejs.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js")]),t._v("，Node.js 的版本要求在 0.10 之上。如果系统安装过 Node.js，即可在命令行中（项目目录下）运行以下命令来安装 karma 以及其命令行调用工具：")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ npm install --save-dev karma\n")])]),n("p",[t._v("这条命令指定 Karma 作为项目的开发依赖包，之后我们可以通过以下命令来调用：")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./node_modules/karma/bin/karma start\n")])]),n("p",[t._v("当需要多次使用时，通过调用 "),n("code",[t._v("node_modules")]),t._v(" 目录下的文件会显得非常繁琐，我们可以安装 "),n("code",[t._v("karmar-cli")]),t._v(" 来解决这个问题：")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ npm install -g karma-cli\n")])]),n("p",[n("code",[t._v("karma-cli")]),t._v(" 提供了 "),n("code",[t._v("karma")]),t._v(" 命令。执行 "),n("code",[t._v("karma")]),t._v(" 命令将调用项目目录下的 "),n("code",[t._v("node_moules/karma")]),t._v(" 来启动测试。")]),n("h4",{attrs:{id:"配置-karma"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置-karma","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置 Karma")]),n("p",[t._v("各个项目的组织方式不同，为了兼容不同的项目，Karma 需要一个配置文件来告诉她关于项目的信息。这些配置包括：待测试的源码文件以及测试代码、采用的测试框架和断言库、测试环境（浏览器）等信息。我们可以使用 "),n("code",[t._v("karma init")]),t._v(" 命令来启动交互式的配置过程。例如，创建 "),n("code",[t._v("developer site")]),t._v(" 的配置文件 ：")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("karam init developer.conf.js\n")])]),n("p",[t._v("Karma 配置文件示例：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("module"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("set")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    basePath"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    files"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'asserts/js/**/*.js'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    frameworks"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'mocha'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'chai'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'sinon'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    browsers"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'chrome'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    reporters"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'mocha'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    autoWatch"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("关于更多配置的信息请参考 "),n("a",{attrs:{href:"https://karma-runner.github.io/1.0/config/configuration-file.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Karma Configuration File")]),t._v("。")]),n("h3",{attrs:{id:"mocha"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mocha","aria-hidden":"true"}},[t._v("#")]),n("a",{attrs:{href:"https://mochajs.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mocha")])]),n("p",[t._v("Mocha 测试框架诞生于 2011 年，是目前最流行的 JavaScript 测试框架之一，在 浏览器 和 Node 环境中都可以使用。一份简单的 Mocha 测试文件的例子如下：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" assert "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("require")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'assert'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("describe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Array'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("it")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'#indexOf'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    assert"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("equal")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("indexOf")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("在这个例子中，"),n("code",[t._v("describe")]),t._v(" 函数用于描述一个 "),n("strong",[t._v("测试套件")]),t._v("，第一个参数是套件的名称，第二参数是一个实际执行的函数。"),n("code",[t._v("it")]),t._v(" 函数描述具体的 "),n("strong",[t._v("测试用例")]),t._v("，表示一个单独的测试；第一个参数是用例的名称，第二个参数是一个实际执行的函数。")]),n("blockquote",[n("p",[n("strong",[t._v("注")]),t._v("： Mocha 基础知识可以参阅 "),n("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《测试框架 Mocha 实例教程》")]),t._v("。")])]),n("h3",{attrs:{id:"chai"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#chai","aria-hidden":"true"}},[t._v("#")]),n("a",{attrs:{href:"http://chaijs.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Chai")])]),n("p",[n("strong",[t._v("断言")]),t._v(" 是指源码执行的结果与预期结果是否一致，如果不一直就抛出错误。由于 Mocha 并未内置断言功能，因此需要使用第三方断言库，我们使用的是 Chai。")]),n("p",[t._v("Chai 是一个可应用于 浏览器 和 Node 环境的断言库，她提供了三种断言风格，即"),n("code",[t._v("Should")]),t._v("，"),n("code",[t._v("Expect")]),t._v(" 以及 "),n("code",[t._v("Assert")]),t._v("。我们目前采用的是 "),n("code",[t._v("Expect")]),t._v(" 风格，一个简单的例子：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("it")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'#indexOf'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("indexOf")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("equal")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("h3",{attrs:{id:"sinon"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sinon","aria-hidden":"true"}},[t._v("#")]),n("a",{attrs:{href:"http://sinonjs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sinon")])]),n("p",[t._v("Sinon 是一个 JavaScript 测试中用于 Spy，Stub 和 Mock 库。简单来说，Sinon 可以为测试提供 “测试替身”，替换不确定的依赖从而使测试变得简单。Sinon 将所谓的 “测试替身” 分为 3 种类型：")]),n("ul",[n("li",[t._v("Spies：可以提供函数调用的信息，但不会改变函数的行为")]),n("li",[t._v("Stubs：与 Spies 类似，但会完全替换掉目标函数。这使得我们可以用这个替身做任何想要的事情，例如返回特定的值。")]),n("li",[t._v("Mocks：通过组合 Spies 和 Stubs，替换一个完整的对象。")])]),n("p",[t._v("创建一个 Spy 的简单示例：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" spy "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sinon"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("spy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 可以像调用函数一样调用一个 spy")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("spy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hello'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 现在我们可以获取这次调用的信息")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spy"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstCalls"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("args"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("另一种场景是我们需要将一个对象的某个函数替换成一个 spy：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" user "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  setName"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 为 SetName 方法创建一个 spy")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" setNameSpy "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sinon"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("spy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'setName'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 现在开始，每次调用这个方法是，相关信息都会被记录")]),t._v("\nuser"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("setName")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Vi'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 查看 Spy 获取到的信息")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setNameSpy"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callCount"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 最后，移除 spy")]),t._v("\nsetNameSpy"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("restore")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),n("h2",{attrs:{id:"编写测试之前"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写测试之前","aria-hidden":"true"}},[t._v("#")]),t._v(" 编写测试之前")]),n("p",[t._v("在 DPW 项目中，所有测试相关的文件都存放于 "),n("code",[t._v("WEB/test")]),t._v(" 目录下。第一次使用时需要安装测试的 NPM 依赖包：在 "),n("code",[t._v("WEB/test")]),t._v(" 目录下执行 "),n("code",[t._v("npm install")]),t._v(" 来安装所需的依赖。")]),n("p",[t._v("当依赖安装完成之后，即可运行 "),n("code",[t._v("npm run developer")]),t._v(" 来执行测试。在 Windows 平台上也可以使用 "),n("code",[t._v("desktop.bat")]),t._v(" 批处理文件来启动测试。除此之外，也可以集合 WebStorm IDE 来启动测试（推荐的方式），WebStorm 测试的配置请看下图:")]),n("img",{staticClass:"full-image",attrs:{alt:"WebStorm Karma Configuration",src:a(50)}}),n("h3",{attrs:{id:"测试文件组织"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试文件组织","aria-hidden":"true"}},[t._v("#")]),t._v(" 测试文件组织")]),n("p",[t._v("单元测试文件存放于 "),n("code",[t._v("WEB/test/unit")]),t._v(" 目录下，测试脚本支持 ES5 以及 "),n("a",{attrs:{href:"http://coffeescript.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CoffeeScript")]),t._v("，文件命名采用 "),n("code",[t._v("name.spec.js")]),t._v(" (或 "),n("code",[t._v("name.spec.coffee")]),t._v("）的形式，并与待测试的脚本名字关联（若待测试的脚本所包含的内容比较多，可以使用目录的形式，目录中每一个文件对应待测试脚本的一个功能点）。")]),n("h3",{attrs:{id:"javascript-与-coffeescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-与-coffeescript","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript 与 CoffeeScript")]),n("p",[t._v("通常测试文件包含大多数的 "),n("code",[t._v("describe")]),t._v(" 和 "),n("code",[t._v("it")]),t._v("，每一个块都比较简短，而 "),n("code",[t._v("describe")]),t._v(" 和 "),n("code",[t._v("it")]),t._v(" 都是接收 "),n("code",[t._v("string")]),t._v(" 和 "),n("code",[t._v("function")]),t._v(" 的形式，这将导致测试脚本包含大量的括号 "),n("code",[t._v("()")]),t._v(" 和 花括号 "),n("code",[t._v("{}")]),t._v("。而 CoffeeScript 非常适合用于这种场景，因此为了更快速简洁地编写测试脚本，推荐使用 CoffeeScript 作为主要的编写语言（编写测试仅需要很少的 CoffeeScript 的知识）。我们可以来对比下使用 JavaScript 和 CoffeeScript 编写的测试文件之间的差异：")]),n("p",[t._v("使用 JavaScript 编写，可以看到里面包含着大量的符号：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("describe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Array'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("it")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'#isArray'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("it")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'#filter'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" actual "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("filter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" item "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("actual"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deep"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("同样的测试脚本使用 CoffeeScript 编写，代码显得十分整洁：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("describe "),n("span",{attrs:{class:"token string"}},[t._v("'Array'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'#isArray'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isArray "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),t._v("\n\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'#filter'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    actual "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" item "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("actual"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deep"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  \n")])]),n("p",[t._v("项目内部已经有许多使用 CoffeeScript 编写的测试脚本，你可以将他们作为参考。在此之前，你或许需要了解 CoffeeScript 最基本的几点知识：")]),n("ol",[n("li",[t._v("变量定义不需要 "),n("code",[t._v("var")])]),n("li",[t._v("函数定义使用 "),n("code",[t._v("->")]),t._v(" 代替 "),n("code",[t._v("function")]),t._v(" 关键字")]),n("li",[t._v("函数调用时的括号时可以省略的")])]),n("h2",{attrs:{id:"开始编写测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开始编写测试","aria-hidden":"true"}},[t._v("#")]),t._v(" 开始编写测试")]),n("p",[t._v("AngularJS 应用的单元测试有一个特性就是：在测试代码之前，我们需要手动引用代码所属的模块（module）以及获取代码中所使用的依赖（DI）。幸运的是，AngularJS 提供了方便的方法让我们处理上述两个过程。")]),n("h3",{attrs:{id:"编写测试的-pre-condition-（必读）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写测试的-pre-condition-（必读）","aria-hidden":"true"}},[t._v("#")]),t._v(" 编写测试的 Pre-condition （必读）")]),n("p",[t._v("我们将在这个章节介绍：“如何引用 module” 以及 “依赖的注入”，所有的测试脚本都将使用到这部分介绍的内容，所以本节 的内容是 "),n("strong",[t._v("必读")]),t._v(" 的。")]),n("h4",{attrs:{id:"module-的引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#module-的引用","aria-hidden":"true"}},[t._v("#")]),t._v(" Module 的引用")]),n("p",[t._v("AngularJS 以 module 来组织应用，因此在执行测试之前需要引用 module。为了引用 module，我们需要使用到 AngularJS 提供的一个称为 "),n("a",{attrs:{href:"https://docs.angularjs.org/api/ngMock",target:"_blank",rel:"noopener noreferrer"}},[t._v("ngMock")]),t._v(" 的测试辅助 Module，此模块提供的 "),n("code",[t._v("angular.mock.module")]),t._v(" 方法用于引入 module(s)。此方法注册了一个快捷方法在 "),n("code",[t._v("window")]),t._v(" 全局空间里即："),n("code",[t._v("window.module")]),t._v("：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("angular"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mock"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("module")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'moduleName'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 或者 ")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("module")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'moduleName'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("当我们需要测试一个放在 "),n("code",[t._v("dpw.components")]),t._v(" module 下的实体时，使用以下语句来引入 "),n("code",[t._v("dpw.components")]),t._v(" module：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("module")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'dpw.components'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[n("strong",[t._v("注意：")]),t._v(" 模块的引入必须在 "),n("code",[t._v("angular.mock.inject")]),t._v(" 之前调用。")]),n("h5",{attrs:{id:"关于-angular-mock-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于-angular-mock-module","aria-hidden":"true"}},[t._v("#")]),t._v(" 关于 "),n("code",[t._v("angular.mock.module")])]),n("p",[t._v("此方法主要用于收集 modules，这些 modules 将用于在每个测试用例之前创建 "),n("code",[t._v("$injector")]),t._v(" 对象（即 DI 处理对象）。在测试不同的时期调用此方法，其执行结果不同：")]),n("ol",[n("li",[t._v("在 "),n("code",[t._v("beforeEach")]),t._v(" 里调用，返回一个 "),n("code",[t._v("workFn")]),t._v("。")]),n("li",[t._v("在 "),n("code",[t._v("it")]),t._v(" 里调用，执行 "),n("code",[t._v("workFn")]),t._v("。")])]),n("h4",{attrs:{id:"依赖的注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖的注入","aria-hidden":"true"}},[t._v("#")]),t._v(" 依赖的注入")]),n("p",[t._v("AngularJS 应用在 "),n("a",{attrs:{href:"https://docs.angularjs.org/guide/bootstrap",target:"_blank",rel:"noopener noreferrer"}},[t._v("bootstrap")]),t._v(" 的过程中会自动创建一个 "),n("code",[t._v("$injector")]),t._v(" 用于处理 DI。而在单元测试中，bootstrap 的过程并未被自动触发，也就说我们需要手动创建 "),n("code",[t._v("$injector")]),t._v("。")]),n("p",[t._v("ngMock 提供了一个方法来处理依赖："),n("code",[t._v("angular.mock.inject")]),t._v("。此方法与 "),n("code",[t._v("angular.mock.module")]),t._v(" 相同，也在 "),n("code",[t._v("window")]),t._v(" 全局空间下注册了一个快捷方法 "),n("code",[t._v("window.inject")]),t._v("。让我们先来看下如何使用 "),n("code",[t._v("inject")]),t._v(" 方法注入依赖：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 声明一个局部变量")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" $rootScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("inject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_$rootScope_"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 当依赖注入后，将获取到的依赖存储在 $rootScope 局部变量中")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// _$rootScope_ 是一个特殊的写法")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// AngularJS 会自动去除前后的 _ 去获取正确的 service")]),t._v("\n  $rootScope "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" _$rootScope_"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("上述例子中，我们定义里一个局部变量 "),n("code",[t._v("$rootScope")]),t._v("。在依赖注入之后，将获取到的依赖 "),n("code",[t._v("_$rootScope_")]),t._v(" 存储在这个局部变量中。")]),n("h5",{attrs:{id:"inject-的工作原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inject-的工作原理","aria-hidden":"true"}},[t._v("#")]),t._v(" inject 的工作原理")]),n("p",[n("code",[t._v("inject")]),t._v(" 方法接收一个或多个函数（记为 "),n("code",[t._v("Fns")]),t._v("）作为参数，方法将调用 "),n("code",[t._v("angular.injector")]),t._v(" 并使用 "),n("code",[t._v("angular.mock.module")]),t._v(" 中配置的 modules（自动会添加上 ng, ngMock）来创建一个 "),n("code",[t._v("$injector")]),t._v("，然后调用 "),n("code",[t._v("$injector.invoke")]),t._v(" 方法解析 "),n("code",[t._v("Fns")]),t._v(" 中所需的依赖。")]),n("h5",{attrs:{id:"inject-的最佳实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inject-的最佳实践","aria-hidden":"true"}},[t._v("#")]),t._v(" inject 的最佳实践")]),n("p",[t._v("例子中出现了前后双下划线（ "),n("code",[t._v("_$rootScope_")]),t._v(" ），这个是为了方便我们命名局部变量。AngularJS 在内部依赖的时候会自动将前后的下划线去掉，从而获取到正确的依赖。请参阅 "),n("a",{attrs:{href:"https://docs.angularjs.org/api/ngMock/function/angular.mock.inject#resolving-references-underscore-wrapping-",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档的说明")]),t._v("。如果，这种方式看起来比较别扭或者需要引用较多的依赖时，我们可以只获取 "),n("code",[t._v("$injector")]),t._v(" 依赖，然后通过这个对象来获取所需的其它依赖：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" $rootScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("inject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  $rootScope "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("get")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'$rootScope'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  $location "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("get")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'$location'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 等等")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("h5",{attrs:{id:"filters-的注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filters-的注入","aria-hidden":"true"}},[t._v("#")]),t._v(" Filters 的注入")]),n("p",[t._v("Filter 的注入有点特殊，因为注入的时候，我们需要在 filter 的名字后面加上 "),n("code",[t._v("Filter")]),t._v("。举个例子，假设有一个名为 "),n("code",[t._v("foo")]),t._v(" 的 filter，他的注入形式如下（注意 "),n("code",[t._v("inject")]),t._v(" 函数的参数名称）：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("describe "),n("span",{attrs:{class:"token string"}},[t._v("'Filter: foo'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  foo "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n  beforeEach module "),n("span",{attrs:{class:"token string"}},[t._v("'bar'")]),t._v("\n  beforeEach "),n("span",{attrs:{class:"token function"}},[t._v("inject")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fooFilter"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    foo "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fooFilter\n\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'foo is always foo'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo "),n("span",{attrs:{class:"token string"}},[t._v("'anything'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token string"}},[t._v("'foo'")]),t._v("\n\n")])]),n("h5",{attrs:{id:"关于-angular-mock-inject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于-angular-mock-inject","aria-hidden":"true"}},[t._v("#")]),t._v(" 关于 "),n("code",[t._v("angular.mock.inject")])]),n("p",[t._v("在 "),n("code",[t._v("beforeEach")]),t._v(" 调用 "),n("code",[t._v("inject")]),t._v(" 时返回一个函数（"),n("code",[t._v("fn")]),t._v("）。每一个测试用例执行前，"),n("code",[t._v("fn")]),t._v(" 都会被执行并创建 "),n("code",[t._v("$injector")]),t._v("，传递给 "),n("code",[t._v("inject")]),t._v(" 的函数将会被 "),n("code",[t._v("$injector.invoke")]),t._v(" 调用，依赖便在此时注入；若在测试用例内部调用 "),n("code",[t._v("inject")]),t._v("，"),n("code",[t._v("fn")]),t._v(" 将会被直接执行（"),n("code",[t._v("$injector")]),t._v(" 已存在），依赖同样在此处理。")]),n("h3",{attrs:{id:"让我们开始吧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#让我们开始吧","aria-hidden":"true"}},[t._v("#")]),t._v(" 让我们开始吧")]),n("p",[t._v("到目前为止，我们了解了编写单元测试所需要的一些前置条件的知识。接下来，就让我们来针对 AngularJS 的不同实体（Service，Filter，Directive，Controller）说明测试用例的编写方法。")]),n("p",[n("strong",[t._v("注意：")]),t._v(" 以下示例测试代码将全部使用 CoffeeScript 编写。")]),n("h3",{attrs:{id:"测试-services"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试-services","aria-hidden":"true"}},[t._v("#")]),t._v(" 测试 Services")]),n("p",[t._v("Services 与 Filters 是最为容易的测试部分，因此我们先从测试 Services 开始。测试一个 service 之前，我们需要了解这个 service 属于哪个 module 并引入此 module；而后通过依赖注入来获取此 service。")]),n("p",[t._v("以 "),n("code",[t._v("helpers")]),t._v(" 为例，其位于 "),n("code",[t._v("dpw.services")]),t._v(" module 里，定义如下：")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("angular"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("module")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'dpw.services'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("factory")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'helpers'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'bar'")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("对应的测试脚本（"),n("code",[t._v("helpers.spec.coffee")]),t._v("）如下：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("describe "),n("span",{attrs:{class:"token string"}},[t._v("'Core Services'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  describe "),n("span",{attrs:{class:"token string"}},[t._v("'helpers'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 定义局部变量")]),t._v("\n    helpers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 引用 module")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module "),n("span",{attrs:{class:"token string"}},[t._v("'dpw.services'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 获取 helpers")]),t._v("\n    beforeEach "),n("span",{attrs:{class:"token function"}},[t._v("inject")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n      helpers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get "),n("span",{attrs:{class:"token string"}},[t._v("'helpers'")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 测试实例属性 foo")]),t._v("\n    it "),n("span",{attrs:{class:"token string"}},[t._v("'#foo'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("helpers"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token string"}},[t._v("'bar'")]),t._v("\n")])]),n("h3",{attrs:{id:"测试-filters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试-filters","aria-hidden":"true"}},[t._v("#")]),t._v(" 测试 Filters")]),n("p",[t._v("Filters 的测试与 Service 类似，先引用 module，而后注入依赖。我们直接看例子：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("describe "),n("span",{attrs:{class:"token string"}},[t._v("'ngFilters#XSRF_Protect'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  XSRFProtect "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  $cookies "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n  "),n("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module "),n("span",{attrs:{class:"token string"}},[t._v("'dpw.common'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  beforeEach "),n("span",{attrs:{class:"token function"}},[t._v("inject")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("XSRFProtectFilter"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _$cookies_"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    XSRFProtect "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" XSRFProtectFilter\n    $cookies "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" _$cookies_\n  \n  afterEach "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    $cookies"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("remove")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'XSRF-TOKEN'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'Should return input if input is not a string'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("XSRFProtect "),n("span",{attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("be"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'Should return input if XSRF-TOKEN cookie is not exist'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("XSRFProtect "),n("span",{attrs:{class:"token string"}},[t._v("'foo'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token string"}},[t._v("'foo'")]),t._v("\n\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'Should add token to the input'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    $cookies"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("put "),n("span",{attrs:{class:"token string"}},[t._v("'XSRF-TOKEN'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'bar'")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("XSRFProtect "),n("span",{attrs:{class:"token string"}},[t._v("'/api/example'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token string"}},[t._v("'/api/example?sctk=bar'")]),t._v("\n")])]),n("h3",{attrs:{id:"测试-controllers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试-controllers","aria-hidden":"true"}},[t._v("#")]),t._v(" 测试 Controllers")]),n("p",[t._v("Controllers 的测试比 Services / Filters 的测试多加了一步，就是我们需要使用 "),n("code",[t._v("$controller")]),t._v(" 去创建一个 Controller 的实例。在实例化 Controller 的过程，可能需要使用 "),n("code",[t._v("$rootScope")]),t._v(" 来创建一个新的 scope；但若在 Controller 的内部没有使用到例如 "),n("code",[t._v("$watch")]),t._v(", "),n("code",[t._v("$apply")]),t._v(" 等 scope 上的函数，使用一个对象字面量做为 scope 也可以。")]),n("p",[t._v("我们先来看一下一个 Controller 测试代码的基本结构：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("describe "),n("span",{attrs:{class:"token string"}},[t._v("'DAG: Something Controller'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  $rootScope  "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  $controller "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  \n"),n("span",{attrs:{class:"token comment"}},[t._v("# Someghint Controller 位于 `DAG.main` Module 里  ")]),t._v("\nbeforeEach module "),n("span",{attrs:{class:"token string"}},[t._v("'DAG.main'")]),t._v("  \nbeforeEach "),n("span",{attrs:{class:"token function"}},[t._v("inject")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  $rootScope  "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get "),n("span",{attrs:{class:"token string"}},[t._v("'$rootScope'")]),t._v("\n  $controller "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get "),n("span",{attrs:{class:"token string"}},[t._v("'$controller'")]),t._v("\n  \ndescribe "),n("span",{attrs:{class:"token string"}},[t._v("'Something#foo'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("# 实例化一个 Something 的实例")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("# $controller 接收两个参数：")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("#   {String} - Controller 的名称")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("#   {Object} - Local 数据，通常包含的是 $scope ")]),t._v("\n  $something "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $controller "),n("span",{attrs:{class:"token string"}},[t._v("'Something'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("$"),n("span",{attrs:{class:"token property"}},[t._v("scope")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $rootScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$something"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token string"}},[t._v("'foo'")]),t._v("\n")])]),n("h4",{attrs:{id:"mock-异步请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mock-异步请求","aria-hidden":"true"}},[t._v("#")]),t._v(" Mock 异步请求")]),n("p",[t._v("在 Controller 内部极有可能使用 "),n("code",[t._v("api")]),t._v(" 这个 service 发起异步请求。当测试一个包含有异步请求的 Controller 时，我们通常希望可以 Mock 掉请求。在 AngularJS 中，我们可以使用被 ngMock 提供的 "),n("code",[t._v("$httpBackend")]),t._v(" 来实现。")]),n("p",[t._v("绝大多数情况下，我们将使用 "),n("code",[t._v("$httpBackend.when")]),t._v(" 方法来拦截请求已经伪造返回数据。"),n("code",[t._v("when")]),t._v(" 函数接收两个参数，第一个为请求的 HTTP Method，第二个是请求的地址，并返回一个 "),n("code",[t._v("requestHandler")]),t._v(" 对象；接着，我们可以在这个 "),n("code",[t._v("requestHandler")]),t._v(" 上调用 "),n("code",[t._v("response")]),t._v(" 方法，响应请求并返回结果。例如：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("$httpBackend"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("when")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'GET'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'/api/users'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response "),n("span",{attrs:{class:"token number"}},[t._v("200")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("在 ngMock 修改之前的 "),n("code",[t._v("$httpBackend")]),t._v(" 会等待请求完成，然后返回结果给发起请求者，这个过程是异步的（因为各个请求的响应时间可能不同）。由于编写这种针对异步的测试代码较为繁琐，因此 ngMock 过的 "),n("code",[t._v("$httpBackend")]),t._v(" 提供了一个称为 "),n("code",[t._v("flush")]),t._v(" 的方法，这个方法响应请求（表示请求已完成）。")]),n("p",[t._v("也就是说，当你使用 "),n("code",[t._v("$http")]),t._v(" 发起一个异步请求后，你必须使用 "),n("code",[t._v("$httpBackend.flush")]),t._v(" 方法。一个简单的例子如下：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("beforeEach "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  $httpBackend"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("when")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'GET'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'/api/user'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response "),n("span",{attrs:{class:"token number"}},[t._v("200")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token property"}},[t._v("name")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Vi'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \ndescribe "),n("span",{attrs:{class:"token string"}},[t._v("'DAG: Something Controller'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'#foo'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# Controller 内部有发起 API 请求")]),t._v("\n    $something "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $controller "),n("span",{attrs:{class:"token string"}},[t._v("'Something'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("$"),n("span",{attrs:{class:"token property"}},[t._v("scope")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $rootScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 响应请求")]),t._v("\n    $httpBackend"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("flush")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$something"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loaded"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("be"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),t._v("\n")])]),n("p",[t._v("需要注意的是，有请求发生时，我们都必须使用 "),n("code",[t._v("flush")]),t._v(" 方法来响应。我们需要使用 "),n("code",[t._v("$httpBackend")]),t._v(" 的两个方法来确保请求都有被捕获并响应：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("afterEach "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  $httpBackend"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("verifyNoOutstandingExpectation")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  $httpBackend"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("verifyNoOutstandingRequest")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),n("h3",{attrs:{id:"测试-directives"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试-directives","aria-hidden":"true"}},[t._v("#")]),t._v(" 测试 Directives")]),n("p",[t._v("Directives 的测试实际上也非常的简单。引用 module 和 依赖注入这两个前置步骤依然需要，另外一个前置条件是 "),n("strong",[t._v("模板的处理")]),t._v("。")]),n("h4",{attrs:{id:"directive-的模板注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#directive-的模板注入","aria-hidden":"true"}},[t._v("#")]),t._v(" Directive 的模板注入")]),n("p",[t._v("在当前的项目中，我们将所有的模板都放置在一个 "),n("code",[t._v("_temlates.html")]),t._v(" 文件中，然后直接作为页面内容注入到页面上去，但在测试中并未注入这个文件的内容到页面上。")]),n("p",[t._v("为了解决这个问题，我加了一个 Karma 的 Pre-processor，用于获取 "),n("code",[t._v("_templates.html")]),t._v(" 中定义的模板。这个 Pre-processor 会将所有的模板放置到 "),n("code",[t._v("window.__templates__")]),t._v(" 对象中，因此测试的时候，我们需要使用遍历这个对象，并使用 "),n("code",[t._v("$templateCache")]),t._v(" 注册模板：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("beforeEach "),n("span",{attrs:{class:"token function"}},[t._v("inject")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  $templateCache "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get "),n("span",{attrs:{class:"token string"}},[t._v("'$templateCache'")]),t._v("\n\n  "),n("span",{attrs:{class:"token comment"}},[t._v("# Get all templates")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" template "),n("span",{attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("window")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__templates__\n    $templateCache"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("put")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" template"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),n("h4",{attrs:{id:"directive-的使用与数据传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#directive-的使用与数据传递","aria-hidden":"true"}},[t._v("#")]),t._v(" Directive 的使用与数据传递")]),n("p",[t._v("接下来，我们需要使用 "),n("code",[t._v("$compile")]),t._v(" 去编译待测试的 directive，得到一个 "),n("code",[t._v("link 函数")]),t._v("；紧接着构造一个 outerScope，并将 outerScope 作为 "),n("code",[t._v("link 函数")]),t._v(" 的参数，完成 directive 模板与 outerScope 提供的数据进行绑定。Directive 所需要的数据，我们可以通过 outerScope 传递过去。")]),n("p",[t._v("需要注意的是，"),n("code",[t._v("link 函数")]),t._v(" 执行完成后，在下一次 digest 执行之前，数据并不会更新。在应用里 AngularJS 会自动更新，但在测试里不会，因此我们要自己调用 "),n("code",[t._v("$digest")]),t._v("。")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("describe "),n("span",{attrs:{class:"token string"}},[t._v("'Directive: dpw-checkbox'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  $rootScope "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  $compile   "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n  "),n("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module "),n("span",{attrs:{class:"token string"}},[t._v("'dpw.common'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("inject")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    $rootScope "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get "),n("span",{attrs:{class:"token string"}},[t._v("'$rootScope'")]),t._v("\n    $compile   "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get "),n("span",{attrs:{class:"token string"}},[t._v("'$compile'")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'model'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 创建 Parent Scope")]),t._v("\n    outerScope "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $rootScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    outerScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isChecked "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),t._v("\n\n    element "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("$compile")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'<dpw-check model=\"isChecked\"></dpw-check>'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outerScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 触发 digest，更新数据")]),t._v("\n    outerScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("$digest")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),n("h4",{attrs:{id:"directive-的数据断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#directive-的数据断言","aria-hidden":"true"}},[t._v("#")]),t._v(" Directive 的数据断言")]),n("p",[n("code",[t._v("dpw-checkbox")]),t._v(" 是将数据绑定在一个 isolate 的 scope，因此我们需要获取到这个 innerScope，然后断言 scope 里各个属性的值。")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("it "),n("span",{attrs:{class:"token string"}},[t._v("'model'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("# 这里省略获取 element 的步骤")]),t._v("\n  innerScope "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isolateScope")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("innerScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("model"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("be"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),t._v("\n")])]),n("p",[t._v("更多时候，我们是将数据直接绑定到 directive 的 controller 上，此时我们可以通过 "),n("code",[t._v("element.controller()")]),t._v(" 方法获取 controller。例如：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("it "),n("span",{attrs:{class:"token string"}},[t._v("'model'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("# 这里省略获取 element 的步骤")]),t._v("\n  ctrl "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("controller "),n("span",{attrs:{class:"token string"}},[t._v("'directiveName'")]),t._v("\n\n  "),n("span",{attrs:{class:"token comment"}},[t._v("# 调用 controller 的 updateState 方法")]),t._v("\n  ctrl"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateState state\n\n  "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctrl"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token string"}},[t._v("'something'")]),t._v("\n")])]),n("h4",{attrs:{id:"directive-的子元素断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#directive-的子元素断言","aria-hidden":"true"}},[t._v("#")]),t._v(" Directive 的子元素断言")]),n("p",[t._v("除了通过 compile 后的 element 获取 scope 和 controller，我们同样可以获取到 element 的子元素。然后检查子元素的各种状态。")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("describe "),n("span",{attrs:{class:"token string"}},[t._v("'button'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  element "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n  beforeEach "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    element "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("$compile")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'...'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outerScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'should has a button'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    $button "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("find "),n("span",{attrs:{class:"token string"}},[t._v("'#buttonId'")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$button"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n  it "),n("span",{attrs:{class:"token string"}},[t._v("'should handle button click event'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 使用 trigger 触发 button 的 click 事件")]),t._v("\n    $button"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trigger "),n("span",{attrs:{class:"token string"}},[t._v("'click'")]),t._v("\n    outerScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("$digest")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("something"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token string"}},[t._v("'...'")]),t._v("\n")])]),n("h4",{attrs:{id:"input-元素测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#input-元素测试","aria-hidden":"true"}},[t._v("#")]),t._v(" input 元素测试")]),n("p",[t._v("首先，input 元素的 change 事件触发会比较特殊一点。如果单纯地通过 jQuery 的 "),n("code",[t._v("val()")]),t._v(" 函数更改 input 值，并不会触发 input 的 change 事件，必须结合使用 "),n("code",[t._v("trigger")]),t._v(" 函数：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("  it "),n("span",{attrs:{class:"token string"}},[t._v("'input test'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# element = ...")]),t._v("\n    $inputElement"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("val")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'foo'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trigger "),n("span",{attrs:{class:"token string"}},[t._v("'input'")]),t._v("\n    outerScope"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("$digest")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# expect")]),t._v("\n")])]),n("p",[t._v("如果 input 使用了 "),n("code",[t._v("ngModel")]),t._v("，并且使用了 "),n("a",{attrs:{href:"https://docs.angularjs.org/api/ng/directive/ngModelOptions",target:"_blank",rel:"noopener noreferrer"}},[t._v("ngModelOptions")]),t._v(" 的 "),n("code",[t._v("debounce")]),t._v(" 时，我们需要借助 "),n("code",[t._v("$timeout.flush()")]),t._v(" 来清除 debounce 的等待时间：")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("  it "),n("span",{attrs:{class:"token string"}},[t._v("'input test'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# element = ...")]),t._v("\n    $inputElement"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("val")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'foo'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trigger "),n("span",{attrs:{class:"token string"}},[t._v("'input'")]),t._v("\n    $timeout"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("flush")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# expect")]),t._v("\n")])]),n("p",[t._v("实际上，任何有使用 "),n("code",[t._v("$timeout")]),t._v(" 的地方我们都可使用 "),n("code",[t._v("$timeout.flush()")]),t._v(" 来清除等待时间，从而让测试变成同步执行。")]),n("h3",{attrs:{id:"测试-components"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试-components","aria-hidden":"true"}},[t._v("#")]),t._v(" 测试 Components")]),n("p",[t._v("Component 的测试基本与 Directive 类似：引用 Module、依赖注入、获取模板以及使用 Component（同样是 $compile）。实际上，在 Angular 1.x 中 Component 仅仅是 Directive 的一层封装。")]),n("p",[t._v("Component 倾向于抛弃 scope （还是可以使用），而使用 controller代替。因此为了测试的方便，ngMock 提供了 "),n("code",[t._v("$componentController")]),t._v(" 方法，用于实例化一个 component 的 controller，而不用通过 $compile component 后去获取。")]),n("pre",{pre:!0,attrs:{class:"language-coffeescript"}},[n("code",[t._v("describe "),n("span",{attrs:{class:"token string"}},[t._v("'Core Components'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  describle "),n("span",{attrs:{class:"token string"}},[t._v("'some-component'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    $componentController "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module "),n("span",{attrs:{class:"token string"}},[t._v("'someModule'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("inject")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      $componentController "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $injector"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get "),n("span",{attrs:{class:"token string"}},[t._v("'$componentController'")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    it "),n("span",{attrs:{class:"token string"}},[t._v("'Component Controller Instance'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      $ctrl "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $componentController "),n("span",{attrs:{class:"token string"}},[t._v("'someComponent'")]),t._v("\n      $ctrl"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onSearch "),n("span",{attrs:{class:"token string"}},[t._v("'query'")]),t._v("\n      "),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$ctrl"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal "),n("span",{attrs:{class:"token string"}},[t._v("'bar'")]),t._v("\n")])]),n("p",[t._v("除了这点以外，Component 的测试与 Directive 几乎相同。")]),n("hr"),n("h2",{attrs:{id:"修订版本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修订版本","aria-hidden":"true"}},[t._v("#")]),t._v(" 修订版本")]),n("table",[n("thead",[n("tr",[n("th",[t._v("版本")]),n("th",[t._v("日期")]),n("th",[t._v("作者")]),n("th",[t._v("修订信息")])])]),n("tbody",[n("tr",[n("td",[t._v("1.0")]),n("td",[t._v("2016-08-08")]),n("td",[t._v("Vi")]),n("td",[t._v("Initialization")])]),n("tr",[n("td",[t._v("1.1")]),n("td",[t._v("2016-08-18")]),n("td",[t._v("Vi")]),n("td",[t._v("First review")])])])])])}],o=a(0),e=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);s.default=e.exports}}]);